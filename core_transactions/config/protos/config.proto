// Copyright 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";

option java_multiple_files = true;
option java_package = "sawtooth.config.protobuf";

// Configuration Setting Payload
// - Contains either a propsal or a vote.
message ConfigPayload {
    // The action indicates data is contained within this payload
    enum Action {
        // A proposal action - data will be a ConfigProposal
        PROPOSE = 0;

        // A vote action - data will be a ConfigVote
        VOTE = 1;
    }
    // The action of this payload
    Action action = 1;

    // The content of this payload
    bytes data = 2;
}

// Configuration Setting Proposal
//
// This message proposes a change in a setting value.
message ConfigProposal {
    // The setting key.  E.g. sawtooth.config.authorization_type
    string setting = 1;

    // The setting value. E.g. 'ballot'
    string value = 2;

    // allow duplicate proposals with different hashes
    // randomly created by the client
    string nonce = 3;
}

// Configuration Setting Vote
//
// In ballot mode, a propsal must be voted on.  This message indicates an
// acceptance or rejection of a proposal, where the proposal is identified
// by its id.
message ConfigVote {
    enum Vote {
        ACCEPT = 0;
        REJECT = 1;
    }

    // The id of the proposal, as found in the
    // sawtooth.config.vote.proposals setting field
    string proposal_id = 1;

    Vote vote = 2;
}

// Contains a setting entry (or entries, in the case of collisions).
message SettingEntry {
   // Map of (setting, value) pairs
   map<string, string> values = 1;
}

// Contains the vote counts for a given proposal.
message ConfigCandidate {
    ConfigProposal proposal = 1;

    // Map of (public key, Vote) pairs
    map<string, ConfigVote.Vote> votes = 2;
}

// Contains all the configuration candiates up for vote.
message ConfigCandidates {
    // Map of (proposal_id, ConfigCandidate) pairs
    map<string, ConfigCandidate> candidates = 1;
}
