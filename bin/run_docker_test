#!/usr/bin/env python3
#
# Copyright 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from subprocess import run, PIPE, CalledProcessError
import sys
import argparse
import time
import yaml


class RunDockerTestError(Exception):
    pass


def main():
    args = parse_args()

    if not args.prefix.isalnum():
        raise RunDockerTestError("Prefix must be alphanumeric")

    compose = [
        'docker-compose',
        '-p', args.prefix,
        '-f', args.compose_file
    ]

    compose_up = compose + [
        'up', '--abort-on-container-exit', '--build'
    ]

    compose_down = compose + ['down']

    inspect = [
        'docker', 'inspect',
        '-f', "{{.State.ExitCode}}",
        "{}_{}_1".format(args.prefix, args.test_service)
    ]

    compose_dict = load_compose_file(args.compose_file)
    if args.test_service not in compose_dict['services']:
        raise RunDockerTestError(
            "Test service '{}' does not exist in compose file: '{}'".format(
                args.test_service, args.compose_file))

    if not args.no_build:
        docker_build_all(compose_dict)

    start_time = time.time()
    timeout = args.timeout

    # Run tests
    try:
        print("Running: {}".format(compose_up))
        run(compose_up, check=True, timeout=timeout)
    except CalledProcessError:
        raise RunDockerTestError(
            "Failed to start all docker containers. Do `docker ps -a` to "
            "list residual containers.")

    end_time = time.time()
    delta_time = end_time - start_time
    start_time = end_time
    timeout = int(timeout - delta_time)

    # Get success value of tests
    try:
        print("Running: {}".format(inspect))
        success = run(
            inspect, stdout=PIPE,
            timeout=timeout, check=True
        ).stdout.decode().strip()
    except CalledProcessError:
        raise RunDockerTestError(
            "Aborting.. Could not inspect test services '{}'. Do "
            "`docker ps -a` to list residual containers.".format(
                args.test_service))

    end_time = time.time()
    delta_time = end_time - start_time
    start_time = end_time
    timeout = int(timeout - delta_time)

    # Clean up
    try:
        print("Running: {}".format(compose_down))
        run(compose_down, check=True, timeout=timeout)
    except CalledProcessError:
        raise RunDockerTestError(
            "Failed to remove all docker containers. Do `docker ps -a` to "
            "list residual containers.")

    exit(int(success))


def load_compose_file(compose_file):
    try:
        with open(compose_file) as fd:
            contents = fd.read()
        compose = yaml.load(contents)
        return compose

    except OSError:
        raise RunDockerTestError(
            "Docker compose file '{}' could not be opened. Make sure it "
            "exists and is readable.".format(compose_file))


def docker_build_all(compose_dict):

    for name, service in compose_dict['services'].items():
        if 'image' in service:
            print("Building {}...".format(name))
            try:
                run(
                    ['sawtooth', 'docker', 'build', service['image']],
                    check=True)

            except CalledProcessError:
                raise RunDockerTestError(
                    "Sawtooth failed to build docker image '{}'. Does it "
                    "exist?".format(service['image']))


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "compose_file",
        help="docker-compose.yaml file that contains the test")

    # Allow passing in a prefix to docker compose.
    # This can be used to run multiple isolated instances of the test.
    parser.add_argument(
        "-p", "--prefix",
        help="id tests running in parallel, must be alphanumeric",
        default="test")

    parser.add_argument(
        "-s", "--test-service",
        help="service in docker-compose.yaml that runs the test",
        default="integration_test")

    parser.add_argument(
        "-n", "--no-build",
        help="don't build docker images",
        action='store_true',
        default=False)

    parser.add_argument(
        "-t", "--timeout",
        help="how long to wait before timing out",
        type=int,
        default=300)

    return parser.parse_args()


if __name__ == "__main__":
    try:
        main()

    except RunDockerTestError as err:
        print(err, file=sys.stderr)
        exit(1)
