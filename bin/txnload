#!/usr/bin/env python

# Copyright 2016 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

import argparse
import os
import random
import re
import sys
import time
import urllib2
import logging

from gossip import node, signed_object
from gossip.common import pretty_print_dict
from gossip.common import dict2cbor
from gossip.common import cbor2dict
from gossip.common import json2dict
from gossip.config import ArgparseOptionsConfig
from gossip.config import ConfigFileNotFound
from gossip.config import InvalidSubstitutionKey
from ledger.transaction import integer_key
from txnserver import log_setup
from txnserver.config import get_validator_configuration

logger = logging.getLogger(__name__)

RunningServers = {}
ServerRecheck = {}

GlobalStore = {}
GlobalTransactions = {}
GlobalKeys = []

LocalNode = None


# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def _recheckservers():
    global RunningServers, ServerRecheck

    now = time.time()
    for baseurl, recheck in ServerRecheck.iteritems():
        if recheck < now:
            RunningServers[baseurl] = True

    for baseurl in RunningServers.iterkeys():
        if baseurl in ServerRecheck:
            del ServerRecheck[baseurl]


# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def _markdown(baseurl):
    global RunningServers, ServerRecheck
    logger.warn('mark down %s', baseurl)

    del RunningServers[baseurl]
    ServerRecheck[baseurl] = time.time() + 30.0


# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def _postmsg(baseurl, msg):
    msg.SenderID = LocalNode.Identifier
    msg.sign_from_node(LocalNode)

    data = dict2cbor(msg.dump())
    datalen = len(data)

    url = baseurl + msg.MessageType

    request = urllib2.Request(url, data, {'Content-Type': 'application/cbor',
                                          'Content-Length': datalen})

    try:
        response = urllib2.urlopen(request)
    except urllib2.HTTPError as err:
        _markdown(baseurl)
        logger.error('operation failed with response: %s', err.code)
        return None
    except urllib2.URLError as err:
        _markdown(baseurl)
        logger.error('operation failed for %s: %s', baseurl, err.reason)
        return None
    except:
        _markdown(baseurl)
        logger.error('no response from server')
        return None

    content = response.read()
    headers = response.info()
    response.close()

    encoding = headers.get('Content-Type')
    if encoding == 'application/json':
        value = json2dict(content)
    elif encoding == 'application/cbor':
        value = cbor2dict(content)
    else:
        logger.info('server responds with message %s of type %s', content,
                    encoding)
        return content

    logger.debug(pretty_print_dict(value))
    return value


# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def do_txn(baseurl, expressions, dependencies):
    _TxnVerbMap = {'=': 'set', '+=': 'inc', '-=': 'dec'}

    txn = integer_key.IntegerKeyTransaction()
    txn.Dependencies = dependencies

    pattern = re.compile(
        '^\s*(?P<name>[-a-zA-Z0-9]+)\s*(?P<verb>[+-]?=)\s*(?P<value>[0-9]+)\s*$')  # noqa
    for expression in expressions:
        match = pattern.match(expression)
        if not match:
            logger.error('unable to parse the transaction; %s', expression)
            return False

        update = integer_key.Update()
        update.Verb = _TxnVerbMap[match.group('verb')]
        update.Name = match.group('name')
        update.Value = long(match.group('value'))
        txn.Updates.append(update)

    txn.sign_from_node(LocalNode)

    msg = integer_key.IntegerKeyTransactionMessage()
    msg.Transaction = txn

    result = _postmsg(baseurl, msg)

    return txn.Identifier


# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def generate_load(config):
    symbase = config["Symbol"]
    urllist = config["URLs"]
    interval = config["Interval"]
    count = config["Count"] or sys.maxint

    global GlobalStore, GlobalTransactions, GlobalKeys

    global LocalNode
    keyfile = config.get("KeyFile")
    signingkey = signed_object.generate_signing_key(wifstr=ReadKeyFile(
        keyfile)) if keyfile else signed_object.generate_signing_key()
    identifier = signed_object.generate_identifier(signingkey)
    LocalNode = node.Node(identifier=identifier,
                          signingkey=signingkey,
                          name="loadgen")

    global RunningServers
    for url in urllist:
        RunningServers[url] = True

    while count > 0:
        count -= 1
        idx = random.randint(0, len(GlobalStore))
        if idx == len(GlobalStore):
            var = '{0}{1}'.format(symbase, len(GlobalStore))
            expr = '{0} = 0'.format(var)

            dependencies = []
            GlobalStore[var] = 0
            GlobalKeys.append(var)
        else:
            var = GlobalKeys[idx]
            expr = '{0} += 1'.format(var)

            dependencies = [GlobalTransactions[var]]
            GlobalStore[var] += 1

        _recheckservers()

        urls = RunningServers.keys()
        random.shuffle(urls)

        success = False
        for url in urls:
            logger.info('sending transaction <%s> to %s', expr, url)
            result = do_txn(url, [expr], dependencies)
            if result:
                GlobalTransactions[var] = result
                success = True
                break

        if not success:
            logger.warn('unable to find a functional server, shutting down')
            return

        time.sleep(random.expovariate(1.0 / interval))


# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def local_main(config):
    logger.warn('start load generation')
    generate_load(config)
    logger.warn('load generation complete')


# DO NOT MODIFY BELOW THIS LINE
# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def parse_command_line(args):
    parser = argparse.ArgumentParser()

    parser.add_argument('--config',
                        help='configuration file',
                        default=['txnload.js'],
                        nargs='+')
    parser.add_argument('--keyfile', help='Name of the key file')
    parser.add_argument('--loglevel', help='Logging level', default='info')
    parser.add_argument('--conf-dir', help='Name of the config directory')
    parser.add_argument('--log-dir', help='Name of the log directory')
    parser.add_argument(
        '--logfile',
        help='Name of the log file, __screen__ for standard output')
    parser.add_argument('--symbol', help='Base string for symbols')
    parser.add_argument('--urls',
                        help='List of potential web server to contact',
                        nargs='+')
    parser.add_argument('--interval',
                        help='Average interval between transactions',
                        type=float)
    parser.add_argument('--count',
                        help='Number of messages to send',
                        type=int,
                        default=sys.maxint)

    return parser.parse_args(args)


# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def get_configuration(args, os_name=os.name, config_files_required=True):
    options = parse_command_line(args)

    options_config = ArgparseOptionsConfig(
        [
            ('conf_dir', 'ConfigDirectory'),
            ('count', 'Count'),
            ('interval', 'Interval'),
            ('log_dir', 'LogDirectory'),
            ('logfile', 'LogFile'),
            ('loglevel', 'LogLevel'),
            ('keyfile', 'KeyFile'),
            ('symbol', 'Symbol'),
            ('urls', 'URLs'),
        ], options)

    if "LogLevel" in options_config:
        options_config["LogLevel"] = options_config["LogLevel"].upper()

    cfg = get_validator_configuration(options.config, options_config, os_name,
                                      config_files_required)

    if "Symbol" not in cfg:
        cfg["Symbol"] = "SYM"

    if "URLs" not in cfg:
        cfg["URLs"] = ["http://localhost:8080"]

    if "Interval" not in cfg:
        cfg["Interval"] = 10.0

    return cfg


# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def read_key_file(keyfile):
    with open(keyfile, "r") as fd:
        key = fd.read().strip()
    return key


# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def main(args):
    try:
        cfg = get_configuration(args)
    except ConfigFileNotFound, e:
        print >> sys.stderr, str(e)
        sys.exit(1)
    except InvalidSubstitutionKey, e:
        print >> sys.stderr, str(e)
        sys.exit(1)

    log_setup.setup_loggers(cfg)

    if "KeyFile" in cfg:
        keyfile = cfg["KeyFile"]
        if os.path.isfile(keyfile):
            logger.info('read signing key from %s', keyfile)
            key = read_key_file(keyfile)
            cfg['SigningKey'] = key
        else:
            logger.warn('unable to find locate key file %s', keyfile)

    local_main(cfg)


if __name__ == '__main__':
    main(sys.argv[1:])
